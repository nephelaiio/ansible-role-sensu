---
- name: create sensu binary directories
  file:
    state: directory
    path: "{{ item }}"
    mode: 0755
  with_items:
    - "{{ sensu_user_home }}"
    - "{{ sensu_bin_dir }}"

- name: create sensu user directories
  file:
    state: directory
    path: "{{ item }}"
    owner: "{{ sensu_service_user }}"
    group: "{{ sensu_service_group }}"
  with_items:
    - "{{ sensu_pid_dir }}"
    - "{{ sensu_log_dir }}"
    - "{{ sensu_conf_root }}"
    - "{{ sensu_conf_dir }}"

- name: install ruby
  package:
    name: "{{ ruby_packages }}"

- name: install ruby gems
  gem:
    name: "{{ sensu_gem }}"
    user_install: no

- name: create install bin helper
  template:
    src: sensu-install.j2
    dest: "{{ sensu_user_home }}/bin/sensu-install"
    mode: 0755

- name: create server bin helper
  template:
    src: sensu-service.j2
    dest: "{{ sensu_user_home }}/bin/sensu-service"
    mode: 0755

- name: create systemd client service units
  template:
    src: systemd.service.j2
    dest: "/etc/systemd/system/sensu-{{ service }}.service"
  vars:
    service: "{{ item }}"
    user: "{{ sensu_service_user }}"
    group: "{{ sensu_service_group }}"
  with_items:
    - client
  when: not sensu_server
  notify: reload systemd

- name: create systemd server service units
  template:
    src: systemd.service.j2
    dest: "/etc/systemd/system/sensu-{{ service }}.service"
  vars:
    service: "{{ item }}"
    user: "{{ sensu_service_user }}"
    group: "{{ sensu_service_group }}"
  with_items:
    - server
    - api
  when: sensu_server
  notify: reload systemd

- name: manage common configuration
  template:
    src: conf.json.j2
    dest: "{{ sensu_conf_dir }}/common.json"
  vars:
    sensu_conf: "{{ sensu_conf_common }}"
  notify:
    - restart client service
    - restart master service

- name: manage client configuration
  template:
    src: conf.json.j2
    dest: "{{ sensu_conf_dir }}/client.json"
  vars:
    sensu_conf: "{{ sensu_conf_client }}"
  notify: restart client service
  when: not sensu_server

- name: manage server configuration
  template:
    src: conf.json.j2
    dest: "{{ sensu_conf_dir }}/server.json"
  vars:
    sensu_conf: "{{ sensu_conf_server }}"
  notify: restart master service
  when: sensu_server

- name: manage check configuration
  template:
    src: conf.json.j2
    dest: "{{ sensu_conf_dir }}/checks.json"
  vars:
    sensu_conf: "{{ sensu_conf_checks }}"
  notify:
    - restart master service
    - restart client service

- name: manage systemd tmpfiles
  template:
    src: systemd-tmpfiles.conf.j2
    dest: /usr/lib/tmpfiles.d/sensu.conf
  vars:
    pid_dir: "{{ sensu_pid_dir }}"

- name: manage client service
  systemd:
    name: sensu-client
    state: "{{ sensu_service_state }}"
    enabled: "{{ sensu_service_enabled }}"
  when: not sensu_server

- name: manage master service
  systemd:
    name: "{{ item }}"
    state: "{{ sensu_service_state }}"
    enabled: "{{ sensu_service_enabled }}"
  with_items:
    - sensu-api
    - sensu-server
  when: sensu_server

- meta: flush_handlers
